{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "mMnNXXtB2Nh2"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "EscCeVV96YlF"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fadza\\AppData\\Local\\Temp\\ipykernel_23768\\3794716755.py:1: DtypeWarning: Columns (108) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  Training=pd.read_csv('male_players (legacy).csv',na_values = '-')\n"
     ]
    }
   ],
   "source": [
    "Training=pd.read_csv('male_players (legacy).csv',na_values = '-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "pTWkLM537CLm"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>player_url</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>fifa_update_date</th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>/player/158023/lionel-messi/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/158/023/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>/player/20801/c-ronaldo-dos-santos-aveiro/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/020/801/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>/player/9014/arjen-robben/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/009/014/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>/player/41236/zlatan-ibrahimovic/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>65+3</td>\n",
       "      <td>65+3</td>\n",
       "      <td>61+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/041/236/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>/player/167495/manuel-neuer/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>40+3</td>\n",
       "      <td>40+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/167/495/15_120.png</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 110 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   player_id                                        player_url  fifa_version  \\\n",
       "0     158023                /player/158023/lionel-messi/150002            15   \n",
       "1      20801  /player/20801/c-ronaldo-dos-santos-aveiro/150002            15   \n",
       "2       9014                  /player/9014/arjen-robben/150002            15   \n",
       "3      41236           /player/41236/zlatan-ibrahimovic/150002            15   \n",
       "4     167495                /player/167495/manuel-neuer/150002            15   \n",
       "\n",
       "   fifa_update fifa_update_date         short_name  \\\n",
       "0            2       2014-09-18           L. Messi   \n",
       "1            2       2014-09-18  Cristiano Ronaldo   \n",
       "2            2       2014-09-18          A. Robben   \n",
       "3            2       2014-09-18     Z. Ibrahimović   \n",
       "4            2       2014-09-18           M. Neuer   \n",
       "\n",
       "                             long_name player_positions  overall  potential  \\\n",
       "0       Lionel Andrés Messi Cuccittini               CF       93         95   \n",
       "1  Cristiano Ronaldo dos Santos Aveiro           LW, LM       92         92   \n",
       "2                         Arjen Robben       RM, LM, RW       90         90   \n",
       "3                   Zlatan Ibrahimović               ST       90         90   \n",
       "4                   Manuel Peter Neuer               GK       90         90   \n",
       "\n",
       "   ...   cdm   rdm   rwb    lb   lcb    cb   rcb    rb    gk  \\\n",
       "0  ...  62+3  62+3  62+3  54+3  45+3  45+3  45+3  54+3  15+3   \n",
       "1  ...  63+3  63+3  63+3  57+3  52+3  52+3  52+3  57+3  16+3   \n",
       "2  ...  64+3  64+3  64+3  55+3  46+3  46+3  46+3  55+3  14+3   \n",
       "3  ...  65+3  65+3  61+3  56+3  55+3  55+3  55+3  56+3  17+3   \n",
       "4  ...  40+3  40+3  36+3  36+3  38+3  38+3  38+3  36+3  87+3   \n",
       "\n",
       "                                     player_face_url  \n",
       "0  https://cdn.sofifa.net/players/158/023/15_120.png  \n",
       "1  https://cdn.sofifa.net/players/020/801/15_120.png  \n",
       "2  https://cdn.sofifa.net/players/009/014/15_120.png  \n",
       "3  https://cdn.sofifa.net/players/041/236/15_120.png  \n",
       "4  https://cdn.sofifa.net/players/167/495/15_120.png  \n",
       "\n",
       "[5 rows x 110 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "Training.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QmYtGtzw6G5y"
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "3e4nA4cu8_r2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 161583 entries, 0 to 161582\n",
      "Columns: 110 entries, player_id to player_face_url\n",
      "dtypes: float64(18), int64(45), object(47)\n",
      "memory usage: 135.6+ MB\n"
     ]
    }
   ],
   "source": [
    "Training.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "Xb__sjF99On6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>age</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>...</th>\n",
       "      <th>mentality_composure</th>\n",
       "      <th>defending_marking_awareness</th>\n",
       "      <th>defending_standing_tackle</th>\n",
       "      <th>defending_sliding_tackle</th>\n",
       "      <th>goalkeeping_diving</th>\n",
       "      <th>goalkeeping_handling</th>\n",
       "      <th>goalkeeping_kicking</th>\n",
       "      <th>goalkeeping_positioning</th>\n",
       "      <th>goalkeeping_reflexes</th>\n",
       "      <th>goalkeeping_speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.0</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>1.595300e+05</td>\n",
       "      <td>159822.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>128722.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.00000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>161583.000000</td>\n",
       "      <td>17969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>214484.722353</td>\n",
       "      <td>19.125514</td>\n",
       "      <td>2.0</td>\n",
       "      <td>65.699071</td>\n",
       "      <td>70.744008</td>\n",
       "      <td>2.326770e+06</td>\n",
       "      <td>10855.409768</td>\n",
       "      <td>25.123181</td>\n",
       "      <td>181.240205</td>\n",
       "      <td>75.235031</td>\n",
       "      <td>...</td>\n",
       "      <td>57.816892</td>\n",
       "      <td>45.757957</td>\n",
       "      <td>47.669996</td>\n",
       "      <td>45.698588</td>\n",
       "      <td>16.52961</td>\n",
       "      <td>16.274918</td>\n",
       "      <td>16.140374</td>\n",
       "      <td>16.288861</td>\n",
       "      <td>16.636973</td>\n",
       "      <td>39.149090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>34928.608856</td>\n",
       "      <td>2.559318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.040855</td>\n",
       "      <td>6.259121</td>\n",
       "      <td>6.005746e+06</td>\n",
       "      <td>21941.656285</td>\n",
       "      <td>4.670207</td>\n",
       "      <td>6.750148</td>\n",
       "      <td>7.000456</td>\n",
       "      <td>...</td>\n",
       "      <td>12.329739</td>\n",
       "      <td>20.453699</td>\n",
       "      <td>21.336404</td>\n",
       "      <td>20.935273</td>\n",
       "      <td>17.67047</td>\n",
       "      <td>16.834294</td>\n",
       "      <td>16.476466</td>\n",
       "      <td>16.998697</td>\n",
       "      <td>17.980143</td>\n",
       "      <td>10.503788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>154.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>199159.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>3.250000e+05</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>176.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>8.00000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>220621.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>7.250000e+05</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>181.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>11.00000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>41.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>236958.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>1.800000e+06</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>186.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>14.00000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>46.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>271817.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>1.940000e+08</td>\n",
       "      <td>575000.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>91.00000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>68.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 63 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           player_id   fifa_version  fifa_update        overall  \\\n",
       "count  161583.000000  161583.000000     161583.0  161583.000000   \n",
       "mean   214484.722353      19.125514          2.0      65.699071   \n",
       "std     34928.608856       2.559318          0.0       7.040855   \n",
       "min         2.000000      15.000000          2.0      40.000000   \n",
       "25%    199159.000000      17.000000          2.0      61.000000   \n",
       "50%    220621.000000      19.000000          2.0      66.000000   \n",
       "75%    236958.000000      21.000000          2.0      70.000000   \n",
       "max    271817.000000      23.000000          2.0      94.000000   \n",
       "\n",
       "           potential     value_eur       wage_eur            age  \\\n",
       "count  161583.000000  1.595300e+05  159822.000000  161583.000000   \n",
       "mean       70.744008  2.326770e+06   10855.409768      25.123181   \n",
       "std         6.259121  6.005746e+06   21941.656285       4.670207   \n",
       "min        40.000000  1.000000e+03     500.000000      16.000000   \n",
       "25%        66.000000  3.250000e+05    2000.000000      21.000000   \n",
       "50%        70.000000  7.250000e+05    4000.000000      25.000000   \n",
       "75%        75.000000  1.800000e+06   10000.000000      28.000000   \n",
       "max        95.000000  1.940000e+08  575000.000000      54.000000   \n",
       "\n",
       "           height_cm      weight_kg  ...  mentality_composure  \\\n",
       "count  161583.000000  161583.000000  ...        128722.000000   \n",
       "mean      181.240205      75.235031  ...            57.816892   \n",
       "std         6.750148       7.000456  ...            12.329739   \n",
       "min       154.000000      49.000000  ...             3.000000   \n",
       "25%       176.000000      70.000000  ...            50.000000   \n",
       "50%       181.000000      75.000000  ...            59.000000   \n",
       "75%       186.000000      80.000000  ...            66.000000   \n",
       "max       208.000000     110.000000  ...            96.000000   \n",
       "\n",
       "       defending_marking_awareness  defending_standing_tackle  \\\n",
       "count                161583.000000              161583.000000   \n",
       "mean                     45.757957                  47.669996   \n",
       "std                      20.453699                  21.336404   \n",
       "min                       1.000000                   2.000000   \n",
       "25%                      26.000000                  27.000000   \n",
       "50%                      50.000000                  54.000000   \n",
       "75%                      63.000000                  66.000000   \n",
       "max                      94.000000                  94.000000   \n",
       "\n",
       "       defending_sliding_tackle  goalkeeping_diving  goalkeeping_handling  \\\n",
       "count             161583.000000        161583.00000         161583.000000   \n",
       "mean                  45.698588            16.52961             16.274918   \n",
       "std                   20.935273            17.67047             16.834294   \n",
       "min                    3.000000             1.00000              1.000000   \n",
       "25%                   25.000000             8.00000              8.000000   \n",
       "50%                   52.000000            11.00000             11.000000   \n",
       "75%                   64.000000            14.00000             14.000000   \n",
       "max                   95.000000            91.00000             92.000000   \n",
       "\n",
       "       goalkeeping_kicking  goalkeeping_positioning  goalkeeping_reflexes  \\\n",
       "count        161583.000000            161583.000000         161583.000000   \n",
       "mean             16.140374                16.288861             16.636973   \n",
       "std              16.476466                16.998697             17.980143   \n",
       "min               1.000000                 1.000000              1.000000   \n",
       "25%               8.000000                 8.000000              8.000000   \n",
       "50%              11.000000                11.000000             11.000000   \n",
       "75%              14.000000                14.000000             14.000000   \n",
       "max              95.000000                92.000000             94.000000   \n",
       "\n",
       "       goalkeeping_speed  \n",
       "count       17969.000000  \n",
       "mean           39.149090  \n",
       "std            10.503788  \n",
       "min            12.000000  \n",
       "25%            31.000000  \n",
       "50%            41.000000  \n",
       "75%            46.000000  \n",
       "max            68.000000  \n",
       "\n",
       "[8 rows x 63 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Training.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "Xrblf2YXfp_c"
   },
   "outputs": [],
   "source": [
    "#Looping the columns to classify based on missing values\n",
    "\n",
    "L=[]\n",
    "L_less=[]\n",
    "for i in Training.columns:\n",
    "  if((Training[i].isnull().sum())<(0.4*(Training.shape[0]))):\n",
    "    L.append(i)\n",
    "  else:\n",
    "    L_less.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "SrNBHj_Yngnr"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>player_url</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>fifa_update_date</th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>/player/158023/lionel-messi/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/158/023/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>/player/20801/c-ronaldo-dos-santos-aveiro/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/020/801/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>/player/9014/arjen-robben/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/009/014/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>/player/41236/zlatan-ibrahimovic/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>65+3</td>\n",
       "      <td>65+3</td>\n",
       "      <td>61+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/041/236/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>/player/167495/manuel-neuer/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>40+3</td>\n",
       "      <td>40+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/167/495/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>215477</td>\n",
       "      <td>/player/215477/ivan-kecojevic/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>I. Kecojević</td>\n",
       "      <td>Ivan Kecojević</td>\n",
       "      <td>CB</td>\n",
       "      <td>62</td>\n",
       "      <td>64</td>\n",
       "      <td>...</td>\n",
       "      <td>54</td>\n",
       "      <td>54</td>\n",
       "      <td>54</td>\n",
       "      <td>58</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>58</td>\n",
       "      <td>12</td>\n",
       "      <td>https://cdn.sofifa.net/players/215/477/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>215528</td>\n",
       "      <td>/player/215528/khalid-karami/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>K. Karami</td>\n",
       "      <td>Khalid Karami</td>\n",
       "      <td>RB</td>\n",
       "      <td>62</td>\n",
       "      <td>66</td>\n",
       "      <td>...</td>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>63</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>61</td>\n",
       "      <td>62</td>\n",
       "      <td>13</td>\n",
       "      <td>https://cdn.sofifa.net/players/215/528/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>215580</td>\n",
       "      <td>/player/215580/vahan-gevorgyan/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>V. Gevorgyan</td>\n",
       "      <td>Vahan Gevorgyan</td>\n",
       "      <td>ST, CAM, LM, RM</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>...</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>45</td>\n",
       "      <td>41</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>41</td>\n",
       "      <td>14</td>\n",
       "      <td>https://cdn.sofifa.net/players/215/580/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>215636</td>\n",
       "      <td>/player/215636/stuart-bannigan/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>S. Bannigan</td>\n",
       "      <td>Stuart Bannigan</td>\n",
       "      <td>CDM, LM, CAM</td>\n",
       "      <td>62</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "      <td>60</td>\n",
       "      <td>58</td>\n",
       "      <td>58</td>\n",
       "      <td>58</td>\n",
       "      <td>60</td>\n",
       "      <td>14</td>\n",
       "      <td>https://cdn.sofifa.net/players/215/636/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>215810</td>\n",
       "      <td>/player/215810/cristiano-lombardi/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>C. Lombardi</td>\n",
       "      <td>Cristiano Lombardi</td>\n",
       "      <td>RW, LW, CF</td>\n",
       "      <td>62</td>\n",
       "      <td>78</td>\n",
       "      <td>...</td>\n",
       "      <td>43</td>\n",
       "      <td>43</td>\n",
       "      <td>45</td>\n",
       "      <td>40</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>40</td>\n",
       "      <td>11</td>\n",
       "      <td>https://cdn.sofifa.net/players/215/810/15_120.png</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 110 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      player_id                                        player_url  \\\n",
       "0        158023                /player/158023/lionel-messi/150002   \n",
       "1         20801  /player/20801/c-ronaldo-dos-santos-aveiro/150002   \n",
       "2          9014                  /player/9014/arjen-robben/150002   \n",
       "3         41236           /player/41236/zlatan-ibrahimovic/150002   \n",
       "4        167495                /player/167495/manuel-neuer/150002   \n",
       "...         ...                                               ...   \n",
       "9995     215477              /player/215477/ivan-kecojevic/150002   \n",
       "9996     215528               /player/215528/khalid-karami/150002   \n",
       "9997     215580             /player/215580/vahan-gevorgyan/150002   \n",
       "9998     215636             /player/215636/stuart-bannigan/150002   \n",
       "9999     215810          /player/215810/cristiano-lombardi/150002   \n",
       "\n",
       "      fifa_version  fifa_update fifa_update_date         short_name  \\\n",
       "0               15            2       2014-09-18           L. Messi   \n",
       "1               15            2       2014-09-18  Cristiano Ronaldo   \n",
       "2               15            2       2014-09-18          A. Robben   \n",
       "3               15            2       2014-09-18     Z. Ibrahimović   \n",
       "4               15            2       2014-09-18           M. Neuer   \n",
       "...            ...          ...              ...                ...   \n",
       "9995            15            2       2014-09-18       I. Kecojević   \n",
       "9996            15            2       2014-09-18          K. Karami   \n",
       "9997            15            2       2014-09-18       V. Gevorgyan   \n",
       "9998            15            2       2014-09-18        S. Bannigan   \n",
       "9999            15            2       2014-09-18        C. Lombardi   \n",
       "\n",
       "                                long_name player_positions  overall  \\\n",
       "0          Lionel Andrés Messi Cuccittini               CF       93   \n",
       "1     Cristiano Ronaldo dos Santos Aveiro           LW, LM       92   \n",
       "2                            Arjen Robben       RM, LM, RW       90   \n",
       "3                      Zlatan Ibrahimović               ST       90   \n",
       "4                      Manuel Peter Neuer               GK       90   \n",
       "...                                   ...              ...      ...   \n",
       "9995                       Ivan Kecojević               CB       62   \n",
       "9996                        Khalid Karami               RB       62   \n",
       "9997                      Vahan Gevorgyan  ST, CAM, LM, RM       62   \n",
       "9998                      Stuart Bannigan     CDM, LM, CAM       62   \n",
       "9999                   Cristiano Lombardi       RW, LW, CF       62   \n",
       "\n",
       "      potential  ...   cdm   rdm   rwb    lb   lcb    cb   rcb    rb    gk  \\\n",
       "0            95  ...  62+3  62+3  62+3  54+3  45+3  45+3  45+3  54+3  15+3   \n",
       "1            92  ...  63+3  63+3  63+3  57+3  52+3  52+3  52+3  57+3  16+3   \n",
       "2            90  ...  64+3  64+3  64+3  55+3  46+3  46+3  46+3  55+3  14+3   \n",
       "3            90  ...  65+3  65+3  61+3  56+3  55+3  55+3  55+3  56+3  17+3   \n",
       "4            90  ...  40+3  40+3  36+3  36+3  38+3  38+3  38+3  36+3  87+3   \n",
       "...         ...  ...   ...   ...   ...   ...   ...   ...   ...   ...   ...   \n",
       "9995         64  ...    54    54    54    58    62    62    62    58    12   \n",
       "9996         66  ...    60    60    63    62    61    61    61    62    13   \n",
       "9997         62  ...    46    46    45    41    40    40    40    41    14   \n",
       "9998         69  ...    62    62    62    60    58    58    58    60    14   \n",
       "9999         78  ...    43    43    45    40    36    36    36    40    11   \n",
       "\n",
       "                                        player_face_url  \n",
       "0     https://cdn.sofifa.net/players/158/023/15_120.png  \n",
       "1     https://cdn.sofifa.net/players/020/801/15_120.png  \n",
       "2     https://cdn.sofifa.net/players/009/014/15_120.png  \n",
       "3     https://cdn.sofifa.net/players/041/236/15_120.png  \n",
       "4     https://cdn.sofifa.net/players/167/495/15_120.png  \n",
       "...                                                 ...  \n",
       "9995  https://cdn.sofifa.net/players/215/477/15_120.png  \n",
       "9996  https://cdn.sofifa.net/players/215/528/15_120.png  \n",
       "9997  https://cdn.sofifa.net/players/215/580/15_120.png  \n",
       "9998  https://cdn.sofifa.net/players/215/636/15_120.png  \n",
       "9999  https://cdn.sofifa.net/players/215/810/15_120.png  \n",
       "\n",
       "[10000 rows x 110 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Take the first 10,000 rows\n",
    "df_first_10000 = Training.iloc[:10000]\n",
    "df_first_10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "R3TvNCoMB9PL"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "player_id                     0\n",
       "fifa_version                  0\n",
       "fifa_update                   0\n",
       "overall                       0\n",
       "potential                     0\n",
       "                           ... \n",
       "goalkeeping_handling          0\n",
       "goalkeeping_kicking           0\n",
       "goalkeeping_positioning       0\n",
       "goalkeeping_reflexes          0\n",
       "goalkeeping_speed          9042\n",
       "Length: 63, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#separating numerical and non-numerical columns\n",
    "numeric=df_first_10000.select_dtypes(include=np.number)\n",
    "\n",
    "numeric.isna().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "_XTk7q4yPrQn"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['release_clause_eur', 'mentality_composure']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_nan_columns = numeric.columns[numeric.isnull().all()].tolist()\n",
    "all_nan_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "yTXvMD_qUJgY"
   },
   "outputs": [],
   "source": [
    "numeric.drop(all_nan_columns, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "RSickW97ZwRE"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "762h78THYf4z"
   },
   "outputs": [],
   "source": [
    "#Dropping unnecessary columns\n",
    "\n",
    "numeric.drop(['age', 'weight_kg', 'fifa_version', 'fifa_update', 'club_team_id', 'player_id', 'height_cm'], inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "4_fkemmjad7c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['overall', 'potential', 'value_eur', 'wage_eur', 'league_id',\n",
       "       'league_level', 'club_jersey_number', 'club_contract_valid_until_year',\n",
       "       'nationality_id', 'nation_team_id', 'nation_jersey_number', 'weak_foot',\n",
       "       'skill_moves', 'international_reputation', 'pace', 'shooting',\n",
       "       'passing', 'dribbling', 'defending', 'physic', 'attacking_crossing',\n",
       "       'attacking_finishing', 'attacking_heading_accuracy',\n",
       "       'attacking_short_passing', 'attacking_volleys', 'skill_dribbling',\n",
       "       'skill_curve', 'skill_fk_accuracy', 'skill_long_passing',\n",
       "       'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed',\n",
       "       'movement_agility', 'movement_reactions', 'movement_balance',\n",
       "       'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength',\n",
       "       'power_long_shots', 'mentality_aggression', 'mentality_interceptions',\n",
       "       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n",
       "       'defending_marking_awareness', 'defending_standing_tackle',\n",
       "       'defending_sliding_tackle', 'goalkeeping_diving',\n",
       "       'goalkeeping_handling', 'goalkeeping_kicking',\n",
       "       'goalkeeping_positioning', 'goalkeeping_reflexes', 'goalkeeping_speed'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "4hIGMoqxCDyZ"
   },
   "outputs": [],
   "source": [
    "non_num=df_first_10000.select_dtypes(include=['object'])\n",
    "\n",
    "non_num.dropna(axis=1)\n",
    "non_num.drop(['player_url', 'player_face_url'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "iUU1rNVpDeLe"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fifa_update_date', 'short_name', 'long_name', 'player_positions',\n",
       "       'dob', 'league_name', 'club_name', 'club_position', 'club_loaned_from',\n",
       "       'club_joined_date', 'nationality_name', 'nation_position',\n",
       "       'preferred_foot', 'work_rate', 'body_type', 'real_face', 'player_tags',\n",
       "       'player_traits', 'ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam',\n",
       "       'cam', 'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm',\n",
       "       'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb', 'gk'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_num.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "VvmtgTY_DuqX"
   },
   "outputs": [],
   "source": [
    "#drop irrelevant columns  from the Categorical dataset\n",
    "import pandas as pd\n",
    "\n",
    "columns = (['short_name','long_name', 'player_positions', 'league_name', 'club_name', 'club_position', 'nation_position',\n",
    "           'work_rate', 'player_traits'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "-nWeX3sVG_hg"
   },
   "outputs": [],
   "source": [
    "non_numeric = non_num[columns]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "hync0_zwHZz1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>league_name</th>\n",
       "      <th>club_name</th>\n",
       "      <th>club_position</th>\n",
       "      <th>nation_position</th>\n",
       "      <th>work_rate</th>\n",
       "      <th>player_traits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>La Liga</td>\n",
       "      <td>FC Barcelona</td>\n",
       "      <td>CF</td>\n",
       "      <td>CF</td>\n",
       "      <td>Medium/Low</td>\n",
       "      <td>Finesse Shot, Speed Dribbler (AI), One Club Pl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>La Liga</td>\n",
       "      <td>Real Madrid CF</td>\n",
       "      <td>LW</td>\n",
       "      <td>LW</td>\n",
       "      <td>High/Low</td>\n",
       "      <td>Power Free-Kick, Flair, Long Shot Taker (AI), ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>Bundesliga</td>\n",
       "      <td>FC Bayern München</td>\n",
       "      <td>SUB</td>\n",
       "      <td>RS</td>\n",
       "      <td>High/Low</td>\n",
       "      <td>Diver, Injury Prone, Avoids Using Weaker Foot,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>Ligue 1</td>\n",
       "      <td>Paris Saint-Germain</td>\n",
       "      <td>ST</td>\n",
       "      <td>ST</td>\n",
       "      <td>Medium/Low</td>\n",
       "      <td>Power Free-Kick, Leadership, Flair, Long Shot ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>Bundesliga</td>\n",
       "      <td>FC Bayern München</td>\n",
       "      <td>GK</td>\n",
       "      <td>GK</td>\n",
       "      <td>Medium/Medium</td>\n",
       "      <td>GK Up for Corners, GK Long Throw, 1-on-1 Rush</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>I. Kecojević</td>\n",
       "      <td>Ivan Kecojević</td>\n",
       "      <td>CB</td>\n",
       "      <td>Super League</td>\n",
       "      <td>FC Zürich</td>\n",
       "      <td>CB</td>\n",
       "      <td>SUB</td>\n",
       "      <td>Medium/High</td>\n",
       "      <td>Injury Prone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>K. Karami</td>\n",
       "      <td>Khalid Karami</td>\n",
       "      <td>RB</td>\n",
       "      <td>Eredivisie</td>\n",
       "      <td>Excelsior</td>\n",
       "      <td>RB</td>\n",
       "      <td>SUB</td>\n",
       "      <td>Medium/Medium</td>\n",
       "      <td>Injury Prone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>V. Gevorgyan</td>\n",
       "      <td>Vahan Gevorgyan</td>\n",
       "      <td>ST, CAM, LM, RM</td>\n",
       "      <td>Ekstraklasa</td>\n",
       "      <td>Zawisza Bydgoszcz</td>\n",
       "      <td>SUB</td>\n",
       "      <td>SUB</td>\n",
       "      <td>Medium/Medium</td>\n",
       "      <td>Injury Prone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>S. Bannigan</td>\n",
       "      <td>Stuart Bannigan</td>\n",
       "      <td>CDM, LM, CAM</td>\n",
       "      <td>Premiership</td>\n",
       "      <td>Partick Thistle FC</td>\n",
       "      <td>LAM</td>\n",
       "      <td>SUB</td>\n",
       "      <td>Medium/Medium</td>\n",
       "      <td>Injury Prone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>C. Lombardi</td>\n",
       "      <td>Cristiano Lombardi</td>\n",
       "      <td>RW, LW, CF</td>\n",
       "      <td>Serie B</td>\n",
       "      <td>Trapani</td>\n",
       "      <td>SUB</td>\n",
       "      <td>SUB</td>\n",
       "      <td>High/Medium</td>\n",
       "      <td>Injury Prone</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             short_name                            long_name player_positions  \\\n",
       "0              L. Messi       Lionel Andrés Messi Cuccittini               CF   \n",
       "1     Cristiano Ronaldo  Cristiano Ronaldo dos Santos Aveiro           LW, LM   \n",
       "2             A. Robben                         Arjen Robben       RM, LM, RW   \n",
       "3        Z. Ibrahimović                   Zlatan Ibrahimović               ST   \n",
       "4              M. Neuer                   Manuel Peter Neuer               GK   \n",
       "...                 ...                                  ...              ...   \n",
       "9995       I. Kecojević                       Ivan Kecojević               CB   \n",
       "9996          K. Karami                        Khalid Karami               RB   \n",
       "9997       V. Gevorgyan                      Vahan Gevorgyan  ST, CAM, LM, RM   \n",
       "9998        S. Bannigan                      Stuart Bannigan     CDM, LM, CAM   \n",
       "9999        C. Lombardi                   Cristiano Lombardi       RW, LW, CF   \n",
       "\n",
       "       league_name            club_name club_position nation_position  \\\n",
       "0          La Liga         FC Barcelona            CF              CF   \n",
       "1          La Liga       Real Madrid CF            LW              LW   \n",
       "2       Bundesliga    FC Bayern München           SUB              RS   \n",
       "3          Ligue 1  Paris Saint-Germain            ST              ST   \n",
       "4       Bundesliga    FC Bayern München            GK              GK   \n",
       "...            ...                  ...           ...             ...   \n",
       "9995  Super League            FC Zürich            CB             SUB   \n",
       "9996    Eredivisie            Excelsior            RB             SUB   \n",
       "9997   Ekstraklasa    Zawisza Bydgoszcz           SUB             SUB   \n",
       "9998   Premiership   Partick Thistle FC           LAM             SUB   \n",
       "9999       Serie B              Trapani           SUB             SUB   \n",
       "\n",
       "          work_rate                                      player_traits  \n",
       "0        Medium/Low  Finesse Shot, Speed Dribbler (AI), One Club Pl...  \n",
       "1          High/Low  Power Free-Kick, Flair, Long Shot Taker (AI), ...  \n",
       "2          High/Low  Diver, Injury Prone, Avoids Using Weaker Foot,...  \n",
       "3        Medium/Low  Power Free-Kick, Leadership, Flair, Long Shot ...  \n",
       "4     Medium/Medium      GK Up for Corners, GK Long Throw, 1-on-1 Rush  \n",
       "...             ...                                                ...  \n",
       "9995    Medium/High                                       Injury Prone  \n",
       "9996  Medium/Medium                                       Injury Prone  \n",
       "9997  Medium/Medium                                       Injury Prone  \n",
       "9998  Medium/Medium                                       Injury Prone  \n",
       "9999    High/Medium                                       Injury Prone  \n",
       "\n",
       "[10000 rows x 9 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#Imputing the Categorical Data\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "import pandas as pd\n",
    "\n",
    "imputer = SimpleImputer(strategy=\"most_frequent\")\n",
    "c = imputer.fit_transform(non_numeric)\n",
    "non_numeric = pd.DataFrame(c, columns=non_numeric.columns)\n",
    "non_numeric\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "k-oHFqDLCiKX"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 54)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iQfcU1s2Ma47"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "CrlDjs76clfJ"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Assuming 'numeric' is your original DataFrame with missing values\n",
    "numeric_data = numeric.copy()  # Make a copy of the original DataFrame\n",
    "\n",
    "# Create a SimpleImputer instance\n",
    "imp = SimpleImputer(strategy='mean')  # You can choose 'mean', 'median', 'most_frequent', or 'constant'\n",
    "\n",
    "# Fit and transform the data\n",
    "numeric_data = pd.DataFrame(imp.fit_transform(numeric_data), columns=numeric_data.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "ZkuYlfUwgiSl"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training Dataset\n",
    "numeric_data['overall'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "pWlnLQCXDxsH"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fadza\\anaconda3\\Lib\\site-packages\\sklearn\\preprocessing\\_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_positions_freq_enc</th>\n",
       "      <th>league_name_freq_enc</th>\n",
       "      <th>club_name_freq_enc</th>\n",
       "      <th>club_position_freq_enc</th>\n",
       "      <th>nation_position_freq_enc</th>\n",
       "      <th>player_traits_freq_enc</th>\n",
       "      <th>work_rate_High/High</th>\n",
       "      <th>work_rate_High/Low</th>\n",
       "      <th>work_rate_High/Medium</th>\n",
       "      <th>work_rate_Low/High</th>\n",
       "      <th>...</th>\n",
       "      <th>work_rate_Medium/Medium</th>\n",
       "      <th>short_name_freq_enc_0.0001</th>\n",
       "      <th>short_name_freq_enc_0.0002</th>\n",
       "      <th>short_name_freq_enc_0.0003</th>\n",
       "      <th>short_name_freq_enc_0.0004</th>\n",
       "      <th>short_name_freq_enc_0.0005</th>\n",
       "      <th>short_name_freq_enc_0.0006</th>\n",
       "      <th>long_name_freq_enc_0.0001</th>\n",
       "      <th>long_name_freq_enc_0.0002</th>\n",
       "      <th>long_name_freq_enc_0.0003</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>0.0025</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0018</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>0.0030</td>\n",
       "      <td>0.0103</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>0.0025</td>\n",
       "      <td>0.4289</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0965</td>\n",
       "      <td>0.0454</td>\n",
       "      <td>0.0022</td>\n",
       "      <td>0.0321</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0958</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>0.0025</td>\n",
       "      <td>0.0480</td>\n",
       "      <td>0.0047</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>0.1218</td>\n",
       "      <td>0.0202</td>\n",
       "      <td>0.0014</td>\n",
       "      <td>0.0036</td>\n",
       "      <td>0.9504</td>\n",
       "      <td>0.4691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>0.0333</td>\n",
       "      <td>0.0363</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0380</td>\n",
       "      <td>0.9504</td>\n",
       "      <td>0.4691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0207</td>\n",
       "      <td>0.0017</td>\n",
       "      <td>0.4289</td>\n",
       "      <td>0.9504</td>\n",
       "      <td>0.4691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0121</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0018</td>\n",
       "      <td>0.9504</td>\n",
       "      <td>0.4691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>0.0014</td>\n",
       "      <td>0.4289</td>\n",
       "      <td>0.9504</td>\n",
       "      <td>0.4691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      player_positions_freq_enc  league_name_freq_enc  club_name_freq_enc  \\\n",
       "0                        0.0010                0.0503              0.0025   \n",
       "1                        0.0018                0.0503              0.0030   \n",
       "2                        0.0005                0.0565              0.0025   \n",
       "3                        0.0965                0.0454              0.0022   \n",
       "4                        0.0958                0.0565              0.0025   \n",
       "...                         ...                   ...                 ...   \n",
       "9995                     0.1218                0.0202              0.0014   \n",
       "9996                     0.0333                0.0363              0.0016   \n",
       "9997                     0.0002                0.0207              0.0017   \n",
       "9998                     0.0002                0.0121              0.0006   \n",
       "9999                     0.0009                0.0316              0.0014   \n",
       "\n",
       "      club_position_freq_enc  nation_position_freq_enc  \\\n",
       "0                     0.0010                    0.0002   \n",
       "1                     0.0103                    0.0009   \n",
       "2                     0.4289                    0.0012   \n",
       "3                     0.0321                    0.0033   \n",
       "4                     0.0480                    0.0047   \n",
       "...                      ...                       ...   \n",
       "9995                  0.0036                    0.9504   \n",
       "9996                  0.0380                    0.9504   \n",
       "9997                  0.4289                    0.9504   \n",
       "9998                  0.0018                    0.9504   \n",
       "9999                  0.4289                    0.9504   \n",
       "\n",
       "      player_traits_freq_enc  work_rate_High/High  work_rate_High/Low  \\\n",
       "0                     0.0001                  0.0                 0.0   \n",
       "1                     0.0002                  0.0                 1.0   \n",
       "2                     0.0001                  0.0                 1.0   \n",
       "3                     0.0001                  0.0                 0.0   \n",
       "4                     0.0001                  0.0                 0.0   \n",
       "...                      ...                  ...                 ...   \n",
       "9995                  0.4691                  0.0                 0.0   \n",
       "9996                  0.4691                  0.0                 0.0   \n",
       "9997                  0.4691                  0.0                 0.0   \n",
       "9998                  0.4691                  0.0                 0.0   \n",
       "9999                  0.4691                  0.0                 0.0   \n",
       "\n",
       "      work_rate_High/Medium  work_rate_Low/High  ...  work_rate_Medium/Medium  \\\n",
       "0                       0.0                 0.0  ...                      0.0   \n",
       "1                       0.0                 0.0  ...                      0.0   \n",
       "2                       0.0                 0.0  ...                      0.0   \n",
       "3                       0.0                 0.0  ...                      0.0   \n",
       "4                       0.0                 0.0  ...                      1.0   \n",
       "...                     ...                 ...  ...                      ...   \n",
       "9995                    0.0                 0.0  ...                      0.0   \n",
       "9996                    0.0                 0.0  ...                      1.0   \n",
       "9997                    0.0                 0.0  ...                      1.0   \n",
       "9998                    0.0                 0.0  ...                      1.0   \n",
       "9999                    1.0                 0.0  ...                      0.0   \n",
       "\n",
       "      short_name_freq_enc_0.0001  short_name_freq_enc_0.0002  \\\n",
       "0                            1.0                         0.0   \n",
       "1                            1.0                         0.0   \n",
       "2                            1.0                         0.0   \n",
       "3                            1.0                         0.0   \n",
       "4                            1.0                         0.0   \n",
       "...                          ...                         ...   \n",
       "9995                         1.0                         0.0   \n",
       "9996                         1.0                         0.0   \n",
       "9997                         1.0                         0.0   \n",
       "9998                         1.0                         0.0   \n",
       "9999                         1.0                         0.0   \n",
       "\n",
       "      short_name_freq_enc_0.0003  short_name_freq_enc_0.0004  \\\n",
       "0                            0.0                         0.0   \n",
       "1                            0.0                         0.0   \n",
       "2                            0.0                         0.0   \n",
       "3                            0.0                         0.0   \n",
       "4                            0.0                         0.0   \n",
       "...                          ...                         ...   \n",
       "9995                         0.0                         0.0   \n",
       "9996                         0.0                         0.0   \n",
       "9997                         0.0                         0.0   \n",
       "9998                         0.0                         0.0   \n",
       "9999                         0.0                         0.0   \n",
       "\n",
       "      short_name_freq_enc_0.0005  short_name_freq_enc_0.0006  \\\n",
       "0                            0.0                         0.0   \n",
       "1                            0.0                         0.0   \n",
       "2                            0.0                         0.0   \n",
       "3                            0.0                         0.0   \n",
       "4                            0.0                         0.0   \n",
       "...                          ...                         ...   \n",
       "9995                         0.0                         0.0   \n",
       "9996                         0.0                         0.0   \n",
       "9997                         0.0                         0.0   \n",
       "9998                         0.0                         0.0   \n",
       "9999                         0.0                         0.0   \n",
       "\n",
       "      long_name_freq_enc_0.0001  long_name_freq_enc_0.0002  \\\n",
       "0                           1.0                        0.0   \n",
       "1                           1.0                        0.0   \n",
       "2                           1.0                        0.0   \n",
       "3                           1.0                        0.0   \n",
       "4                           1.0                        0.0   \n",
       "...                         ...                        ...   \n",
       "9995                        1.0                        0.0   \n",
       "9996                        1.0                        0.0   \n",
       "9997                        1.0                        0.0   \n",
       "9998                        1.0                        0.0   \n",
       "9999                        1.0                        0.0   \n",
       "\n",
       "      long_name_freq_enc_0.0003  \n",
       "0                           0.0  \n",
       "1                           0.0  \n",
       "2                           0.0  \n",
       "3                           0.0  \n",
       "4                           0.0  \n",
       "...                         ...  \n",
       "9995                        0.0  \n",
       "9996                        0.0  \n",
       "9997                        0.0  \n",
       "9998                        0.0  \n",
       "9999                        0.0  \n",
       "\n",
       "[10000 rows x 24 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "\n",
    "# Function to apply frequency encoding to high-cardinality columns\n",
    "def frequency_encoding(df, column):\n",
    "    freq_enc = df[column].value_counts(normalize=True)\n",
    "    df[column + '_freq_enc'] = df[column].map(freq_enc)\n",
    "    df.drop(column, axis=1, inplace=True)\n",
    "    return df\n",
    "\n",
    "# Identify high-cardinality columns\n",
    "high_cardinality_cols = [col for col in non_numeric.columns if non_numeric[col].nunique() > 10]\n",
    "\n",
    "# Apply frequency encoding to high-cardinality columns\n",
    "for col in high_cardinality_cols:\n",
    "    non_numeric = frequency_encoding(non_numeric, col)\n",
    "\n",
    "# Identify low-cardinality columns\n",
    "low_cardinality_cols = [col for col in non_numeric.columns if non_numeric[col].nunique() <= 10]\n",
    "\n",
    "# Apply one-hot encoding to low-cardinality columns\n",
    "encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\n",
    "encoded_cols = encoder.fit_transform(non_numeric[low_cardinality_cols])\n",
    "encoded_cols_df = pd.DataFrame(encoded_cols, columns=encoder.get_feature_names_out(low_cardinality_cols))\n",
    "\n",
    "# Drop original low-cardinality columns after encoding\n",
    "non_numeric = non_numeric.drop(low_cardinality_cols, axis=1)\n",
    "\n",
    "# Concatenate the encoded columns with the original DataFrame\n",
    "non_numeric = pd.concat([non_numeric, encoded_cols_df], axis=1)\n",
    "\n",
    "non_numeric\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>league_id</th>\n",
       "      <th>league_level</th>\n",
       "      <th>club_jersey_number</th>\n",
       "      <th>club_contract_valid_until_year</th>\n",
       "      <th>nationality_id</th>\n",
       "      <th>nation_team_id</th>\n",
       "      <th>...</th>\n",
       "      <th>work_rate_Medium/Medium</th>\n",
       "      <th>short_name_freq_enc_0.0001</th>\n",
       "      <th>short_name_freq_enc_0.0002</th>\n",
       "      <th>short_name_freq_enc_0.0003</th>\n",
       "      <th>short_name_freq_enc_0.0004</th>\n",
       "      <th>short_name_freq_enc_0.0005</th>\n",
       "      <th>short_name_freq_enc_0.0006</th>\n",
       "      <th>long_name_freq_enc_0.0001</th>\n",
       "      <th>long_name_freq_enc_0.0002</th>\n",
       "      <th>long_name_freq_enc_0.0003</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>1369.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1354.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>105035.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>1363.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1337.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>62.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>325000.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>189.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>28400.750493</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>62.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>28400.750493</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>62.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>28400.750493</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>62.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>220000.0</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>28400.750493</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>62.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>28400.750493</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      overall  potential    value_eur  wage_eur  league_id  league_level  \\\n",
       "0        93.0       95.0  100500000.0  550000.0       53.0           1.0   \n",
       "1        92.0       92.0   79000000.0  375000.0       53.0           1.0   \n",
       "2        90.0       90.0   54500000.0  275000.0       19.0           1.0   \n",
       "3        90.0       90.0   52500000.0  275000.0       16.0           1.0   \n",
       "4        90.0       90.0   63500000.0  300000.0       19.0           1.0   \n",
       "...       ...        ...          ...       ...        ...           ...   \n",
       "9995     62.0       64.0     325000.0    7000.0      189.0           1.0   \n",
       "9996     62.0       66.0     300000.0    2000.0       10.0           1.0   \n",
       "9997     62.0       62.0     275000.0    4000.0       66.0           1.0   \n",
       "9998     62.0       69.0     220000.0    4000.0       50.0           1.0   \n",
       "9999     62.0       78.0     275000.0    2000.0       32.0           2.0   \n",
       "\n",
       "      club_jersey_number  club_contract_valid_until_year  nationality_id  \\\n",
       "0                   10.0                          2018.0            52.0   \n",
       "1                    7.0                          2018.0            38.0   \n",
       "2                   10.0                          2017.0            34.0   \n",
       "3                   10.0                          2016.0            46.0   \n",
       "4                    1.0                          2019.0            21.0   \n",
       "...                  ...                             ...             ...   \n",
       "9995                25.0                          2017.0            15.0   \n",
       "9996                 2.0                          2016.0           129.0   \n",
       "9997                19.0                          2015.0            37.0   \n",
       "9998                 8.0                          2016.0            42.0   \n",
       "9999                25.0                          2015.0            27.0   \n",
       "\n",
       "      nation_team_id  ...  work_rate_Medium/Medium  \\\n",
       "0        1369.000000  ...                      0.0   \n",
       "1        1354.000000  ...                      0.0   \n",
       "2      105035.000000  ...                      0.0   \n",
       "3        1363.000000  ...                      0.0   \n",
       "4        1337.000000  ...                      1.0   \n",
       "...              ...  ...                      ...   \n",
       "9995    28400.750493  ...                      0.0   \n",
       "9996    28400.750493  ...                      1.0   \n",
       "9997    28400.750493  ...                      1.0   \n",
       "9998    28400.750493  ...                      1.0   \n",
       "9999    28400.750493  ...                      0.0   \n",
       "\n",
       "      short_name_freq_enc_0.0001  short_name_freq_enc_0.0002  \\\n",
       "0                            1.0                         0.0   \n",
       "1                            1.0                         0.0   \n",
       "2                            1.0                         0.0   \n",
       "3                            1.0                         0.0   \n",
       "4                            1.0                         0.0   \n",
       "...                          ...                         ...   \n",
       "9995                         1.0                         0.0   \n",
       "9996                         1.0                         0.0   \n",
       "9997                         1.0                         0.0   \n",
       "9998                         1.0                         0.0   \n",
       "9999                         1.0                         0.0   \n",
       "\n",
       "      short_name_freq_enc_0.0003  short_name_freq_enc_0.0004  \\\n",
       "0                            0.0                         0.0   \n",
       "1                            0.0                         0.0   \n",
       "2                            0.0                         0.0   \n",
       "3                            0.0                         0.0   \n",
       "4                            0.0                         0.0   \n",
       "...                          ...                         ...   \n",
       "9995                         0.0                         0.0   \n",
       "9996                         0.0                         0.0   \n",
       "9997                         0.0                         0.0   \n",
       "9998                         0.0                         0.0   \n",
       "9999                         0.0                         0.0   \n",
       "\n",
       "      short_name_freq_enc_0.0005  short_name_freq_enc_0.0006  \\\n",
       "0                            0.0                         0.0   \n",
       "1                            0.0                         0.0   \n",
       "2                            0.0                         0.0   \n",
       "3                            0.0                         0.0   \n",
       "4                            0.0                         0.0   \n",
       "...                          ...                         ...   \n",
       "9995                         0.0                         0.0   \n",
       "9996                         0.0                         0.0   \n",
       "9997                         0.0                         0.0   \n",
       "9998                         0.0                         0.0   \n",
       "9999                         0.0                         0.0   \n",
       "\n",
       "      long_name_freq_enc_0.0001  long_name_freq_enc_0.0002  \\\n",
       "0                           1.0                        0.0   \n",
       "1                           1.0                        0.0   \n",
       "2                           1.0                        0.0   \n",
       "3                           1.0                        0.0   \n",
       "4                           1.0                        0.0   \n",
       "...                         ...                        ...   \n",
       "9995                        1.0                        0.0   \n",
       "9996                        1.0                        0.0   \n",
       "9997                        1.0                        0.0   \n",
       "9998                        1.0                        0.0   \n",
       "9999                        1.0                        0.0   \n",
       "\n",
       "      long_name_freq_enc_0.0003  \n",
       "0                           0.0  \n",
       "1                           0.0  \n",
       "2                           0.0  \n",
       "3                           0.0  \n",
       "4                           0.0  \n",
       "...                         ...  \n",
       "9995                        0.0  \n",
       "9996                        0.0  \n",
       "9997                        0.0  \n",
       "9998                        0.0  \n",
       "9999                        0.0  \n",
       "\n",
       "[10000 rows x 78 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Now concatenate numeric_data and non_numeric\n",
    "combined_data = pd.concat([numeric_data, non_numeric], axis=1)\n",
    "combined_data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "nWi99ucmlyvf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['overall', 'potential', 'value_eur', 'wage_eur', 'league_id',\n",
       "       'league_level', 'club_jersey_number', 'club_contract_valid_until_year',\n",
       "       'nationality_id', 'nation_team_id', 'nation_jersey_number', 'weak_foot',\n",
       "       'skill_moves', 'international_reputation', 'pace', 'shooting',\n",
       "       'passing', 'dribbling', 'defending', 'physic', 'attacking_crossing',\n",
       "       'attacking_finishing', 'attacking_heading_accuracy',\n",
       "       'attacking_short_passing', 'attacking_volleys', 'skill_dribbling',\n",
       "       'skill_curve', 'skill_fk_accuracy', 'skill_long_passing',\n",
       "       'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed',\n",
       "       'movement_agility', 'movement_reactions', 'movement_balance',\n",
       "       'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength',\n",
       "       'power_long_shots', 'mentality_aggression', 'mentality_interceptions',\n",
       "       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n",
       "       'defending_marking_awareness', 'defending_standing_tackle',\n",
       "       'defending_sliding_tackle', 'goalkeeping_diving',\n",
       "       'goalkeeping_handling', 'goalkeeping_kicking',\n",
       "       'goalkeeping_positioning', 'goalkeeping_reflexes', 'goalkeeping_speed'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "id": "-NgXd8VQ0E-Y"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_data['overall'].isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "id": "k5zR8xykk3Ir"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "overall                     1.000000\n",
       "wage_eur                    0.854027\n",
       "potential                   0.787793\n",
       "movement_reactions          0.702199\n",
       "value_eur                   0.696313\n",
       "international_reputation    0.640649\n",
       "Name: overall, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation Matrix for Training Dataset\n",
    "corr_matrix = combined_data.corr()['overall'].abs().sort_values(ascending=False)\n",
    "corr_matrix.head((6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "BxBpPV2ik0Ob"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>potential</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>international_reputation</th>\n",
       "      <th>passing</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>league_name_freq_enc</th>\n",
       "      <th>shooting</th>\n",
       "      <th>...</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>league_level</th>\n",
       "      <th>mentality_penalties</th>\n",
       "      <th>skill_fk_accuracy</th>\n",
       "      <th>skill_dribbling</th>\n",
       "      <th>mentality_positioning</th>\n",
       "      <th>attacking_crossing</th>\n",
       "      <th>attacking_finishing</th>\n",
       "      <th>physic</th>\n",
       "      <th>attacking_heading_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93.0</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92.0</td>\n",
       "      <td>375000.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>93.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>90.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>0.0454</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>59.950785</td>\n",
       "      <td>64.216434</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>55.593674</td>\n",
       "      <td>...</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.724397</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   overall  wage_eur  potential  movement_reactions    value_eur  \\\n",
       "0     93.0  550000.0       95.0                94.0  100500000.0   \n",
       "1     92.0  375000.0       92.0                90.0   79000000.0   \n",
       "2     90.0  275000.0       90.0                89.0   54500000.0   \n",
       "3     90.0  275000.0       90.0                85.0   52500000.0   \n",
       "4     90.0  300000.0       90.0                89.0   63500000.0   \n",
       "\n",
       "   international_reputation    passing  dribbling  league_name_freq_enc  \\\n",
       "0                       5.0  86.000000  96.000000                0.0503   \n",
       "1                       5.0  81.000000  91.000000                0.0503   \n",
       "2                       5.0  83.000000  92.000000                0.0565   \n",
       "3                       5.0  81.000000  86.000000                0.0454   \n",
       "4                       5.0  59.950785  64.216434                0.0565   \n",
       "\n",
       "    shooting  ...  power_long_shots  league_level  mentality_penalties  \\\n",
       "0  89.000000  ...              88.0           1.0                 76.0   \n",
       "1  93.000000  ...              93.0           1.0                 85.0   \n",
       "2  86.000000  ...              90.0           1.0                 80.0   \n",
       "3  91.000000  ...              88.0           1.0                 91.0   \n",
       "4  55.593674  ...              25.0           1.0                 37.0   \n",
       "\n",
       "   skill_fk_accuracy  skill_dribbling  mentality_positioning  \\\n",
       "0               90.0             96.0                   92.0   \n",
       "1               79.0             93.0                   91.0   \n",
       "2               83.0             93.0                   89.0   \n",
       "3               80.0             88.0                   86.0   \n",
       "4               25.0             25.0                   25.0   \n",
       "\n",
       "   attacking_crossing  attacking_finishing     physic  \\\n",
       "0                84.0                 94.0  63.000000   \n",
       "1                83.0                 95.0  79.000000   \n",
       "2                80.0                 85.0  64.000000   \n",
       "3                76.0                 91.0  86.000000   \n",
       "4                25.0                 25.0  67.724397   \n",
       "\n",
       "   attacking_heading_accuracy  \n",
       "0                        71.0  \n",
       "1                        86.0  \n",
       "2                        50.0  \n",
       "3                        76.0  \n",
       "4                        25.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Subset features for Training Dataset\n",
    "\n",
    "top_features = corr_matrix[corr_matrix >= 0.2].index\n",
    "\n",
    "# Create a new DataFrame with the top features\n",
    "feature_subset_training = combined_data[top_features]\n",
    "feature_subset_training.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "ZECRUVEzlc-r"
   },
   "outputs": [],
   "source": [
    "y= feature_subset_training['overall']\n",
    "X = feature_subset_training.drop('overall', axis=1)\n",
    "for_feature_selection = X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>potential</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>international_reputation</th>\n",
       "      <th>passing</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>league_name_freq_enc</th>\n",
       "      <th>shooting</th>\n",
       "      <th>attacking_short_passing</th>\n",
       "      <th>...</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>league_level</th>\n",
       "      <th>mentality_penalties</th>\n",
       "      <th>skill_fk_accuracy</th>\n",
       "      <th>skill_dribbling</th>\n",
       "      <th>mentality_positioning</th>\n",
       "      <th>attacking_crossing</th>\n",
       "      <th>attacking_finishing</th>\n",
       "      <th>physic</th>\n",
       "      <th>attacking_heading_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>550000.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>89.0</td>\n",
       "      <td>...</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>375000.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>82.0</td>\n",
       "      <td>...</td>\n",
       "      <td>93.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>275000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>86.0</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>275000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>0.0454</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>84.0</td>\n",
       "      <td>...</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>300000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>59.950785</td>\n",
       "      <td>64.216434</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>55.593674</td>\n",
       "      <td>42.0</td>\n",
       "      <td>...</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.724397</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>7000.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>325000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>0.0202</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>55.0</td>\n",
       "      <td>...</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.0363</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>62.0</td>\n",
       "      <td>...</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>4000.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.0207</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>57.0</td>\n",
       "      <td>...</td>\n",
       "      <td>56.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>4000.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>220000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.0121</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>64.0</td>\n",
       "      <td>...</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>59.0</td>\n",
       "      <td>...</td>\n",
       "      <td>59.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      wage_eur  potential  movement_reactions    value_eur  \\\n",
       "0     550000.0       95.0                94.0  100500000.0   \n",
       "1     375000.0       92.0                90.0   79000000.0   \n",
       "2     275000.0       90.0                89.0   54500000.0   \n",
       "3     275000.0       90.0                85.0   52500000.0   \n",
       "4     300000.0       90.0                89.0   63500000.0   \n",
       "...        ...        ...                 ...          ...   \n",
       "9995    7000.0       64.0                54.0     325000.0   \n",
       "9996    2000.0       66.0                61.0     300000.0   \n",
       "9997    4000.0       62.0                65.0     275000.0   \n",
       "9998    4000.0       69.0                56.0     220000.0   \n",
       "9999    2000.0       78.0                30.0     275000.0   \n",
       "\n",
       "      international_reputation    passing  dribbling  league_name_freq_enc  \\\n",
       "0                          5.0  86.000000  96.000000                0.0503   \n",
       "1                          5.0  81.000000  91.000000                0.0503   \n",
       "2                          5.0  83.000000  92.000000                0.0565   \n",
       "3                          5.0  81.000000  86.000000                0.0454   \n",
       "4                          5.0  59.950785  64.216434                0.0565   \n",
       "...                        ...        ...        ...                   ...   \n",
       "9995                       1.0  43.000000  38.000000                0.0202   \n",
       "9996                       1.0  56.000000  62.000000                0.0363   \n",
       "9997                       1.0  58.000000  62.000000                0.0207   \n",
       "9998                       1.0  61.000000  67.000000                0.0121   \n",
       "9999                       1.0  54.000000  67.000000                0.0316   \n",
       "\n",
       "       shooting  attacking_short_passing  ...  power_long_shots  league_level  \\\n",
       "0     89.000000                     89.0  ...              88.0           1.0   \n",
       "1     93.000000                     82.0  ...              93.0           1.0   \n",
       "2     86.000000                     86.0  ...              90.0           1.0   \n",
       "3     91.000000                     84.0  ...              88.0           1.0   \n",
       "4     55.593674                     42.0  ...              25.0           1.0   \n",
       "...         ...                      ...  ...               ...           ...   \n",
       "9995  29.000000                     55.0  ...              28.0           1.0   \n",
       "9996  38.000000                     62.0  ...              26.0           1.0   \n",
       "9997  60.000000                     57.0  ...              56.0           1.0   \n",
       "9998  51.000000                     64.0  ...              53.0           1.0   \n",
       "9999  58.000000                     59.0  ...              59.0           2.0   \n",
       "\n",
       "      mentality_penalties  skill_fk_accuracy  skill_dribbling  \\\n",
       "0                    76.0               90.0             96.0   \n",
       "1                    85.0               79.0             93.0   \n",
       "2                    80.0               83.0             93.0   \n",
       "3                    91.0               80.0             88.0   \n",
       "4                    37.0               25.0             25.0   \n",
       "...                   ...                ...              ...   \n",
       "9995                 39.0               30.0             27.0   \n",
       "9996                 41.0               31.0             61.0   \n",
       "9997                 55.0               52.0             60.0   \n",
       "9998                 51.0               41.0             67.0   \n",
       "9999                 51.0               33.0             69.0   \n",
       "\n",
       "      mentality_positioning  attacking_crossing  attacking_finishing  \\\n",
       "0                      92.0                84.0                 94.0   \n",
       "1                      91.0                83.0                 95.0   \n",
       "2                      89.0                80.0                 85.0   \n",
       "3                      86.0                76.0                 91.0   \n",
       "4                      25.0                25.0                 25.0   \n",
       "...                     ...                 ...                  ...   \n",
       "9995                   29.0                45.0                 24.0   \n",
       "9996                   43.0                64.0                 43.0   \n",
       "9997                   66.0                61.0                 58.0   \n",
       "9998                   53.0                61.0                 49.0   \n",
       "9999                   59.0                57.0                 57.0   \n",
       "\n",
       "         physic  attacking_heading_accuracy  \n",
       "0     63.000000                        71.0  \n",
       "1     79.000000                        86.0  \n",
       "2     64.000000                        50.0  \n",
       "3     86.000000                        76.0  \n",
       "4     67.724397                        25.0  \n",
       "...         ...                         ...  \n",
       "9995  72.000000                        60.0  \n",
       "9996  62.000000                        43.0  \n",
       "9997  55.000000                        49.0  \n",
       "9998  72.000000                        53.0  \n",
       "9999  49.000000                        59.0  \n",
       "\n",
       "[10000 rows x 28 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DoGiVhnNHvbb"
   },
   "source": [
    "### Training the Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler=StandardScaler()\n",
    "X=scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "overall\n",
       "64.0    1042\n",
       "63.0     962\n",
       "65.0     920\n",
       "66.0     844\n",
       "67.0     818\n",
       "68.0     770\n",
       "62.0     698\n",
       "69.0     584\n",
       "70.0     547\n",
       "71.0     462\n",
       "72.0     447\n",
       "73.0     380\n",
       "74.0     373\n",
       "75.0     263\n",
       "76.0     211\n",
       "77.0     150\n",
       "78.0     128\n",
       "79.0     111\n",
       "80.0      82\n",
       "81.0      56\n",
       "82.0      51\n",
       "83.0      37\n",
       "84.0      19\n",
       "85.0      13\n",
       "86.0      13\n",
       "87.0       7\n",
       "88.0       5\n",
       "90.0       3\n",
       "89.0       2\n",
       "92.0       1\n",
       "93.0       1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(y).value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fadza\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=2.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "\n",
    "X = pd.DataFrame(X)\n",
    "y = pd.Series(y)\n",
    "\n",
    "# Use StratifiedKFold with n_splits=2\n",
    "skf = StratifiedKFold(n_splits=2)\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importing Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error, r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 3.48\n",
      "R-squared: 0.86\n",
      "Intercept: 68.21\n",
      "Coefficients:\n",
      "0: 2.04\n",
      "1: 1.55\n",
      "2: 0.92\n",
      "3: -0.00\n",
      "4: 0.21\n",
      "5: 0.32\n",
      "6: 0.00\n",
      "7: 0.23\n",
      "8: 0.03\n",
      "9: -0.00\n",
      "10: 0.00\n",
      "11: -0.00\n",
      "12: -0.26\n",
      "13: -0.00\n",
      "14: -0.00\n",
      "15: 0.00\n",
      "16: -0.00\n",
      "17: -0.00\n",
      "18: -0.00\n",
      "19: -0.08\n",
      "20: 0.00\n",
      "21: 0.00\n",
      "22: -0.06\n",
      "23: -0.00\n",
      "24: -0.00\n",
      "25: -0.00\n",
      "26: 0.35\n",
      "27: 0.06\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize the Lasso regression model\n",
    "alpha = 0.1  # Regularization strength, adjust as needed\n",
    "lasso = Lasso(alpha=alpha, random_state=42)\n",
    "\n",
    "# Fit the model using the training data\n",
    "lasso.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions using the testing set\n",
    "y_pred = lasso.predict(X_test)\n",
    "\n",
    "# Model evaluation\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f'Mean Squared Error: {mse:.2f}')\n",
    "print(f'R-squared: {r2:.2f}')\n",
    "\n",
    "# Coefficients and Intercept\n",
    "print(f'Intercept: {lasso.intercept_:.2f}')\n",
    "print('Coefficients:')\n",
    "for feature, coef in zip(X.columns, lasso.coef_):\n",
    "    print(f'{feature}: {coef:.2f}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision  Tree Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtree = DecisionTreeRegressor(max_depth = 10)\n",
    "dtree.fit(X_train, y_train)\n",
    "y_pred = dtree.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Mean Absolute Error =0.6838089096320168, \n",
      "     Mean Squared Error = 1.1205292566466596,\n",
      "     Root Mean Squared Error = (np.sqrt1.1205292566466596),\n",
      "     R2 Score = 0.9544778009948118\n"
     ]
    }
   ],
   "source": [
    "print (f\"\"\" Mean Absolute Error ={mean_absolute_error(y_pred, y_test)}, \n",
    "     Mean Squared Error = {mean_squared_error (y_pred, y_test)},\n",
    "     Root Mean Squared Error = (np.sqrt{mean_squared_error(y_pred, y_test)}),\n",
    "     R2 Score = {r2_score(y_pred, y_test)}\"\"\"\n",
    ")\n",
    "\n",
    "# if R2 score value is close to 1 it means the model is good, and bad as it gets closer to zero"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Support Vector Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR(epsilon=0.2, kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR(epsilon=0.2, kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVR(epsilon=0.2, kernel='linear')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "svr = SVR(kernel='linear', C=1.0, epsilon=0.2)  # Adjust kernel and other parameters\n",
    "svr.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Mean Absolute Error =0.6838089096320168, \n",
      "     Mean Squared Error = 1.1205292566466596,\n",
      "     Root Mean Squared Error = (np.sqrt1.1205292566466596),\n",
      "     R2 Score = 0.9544778009948118\n"
     ]
    }
   ],
   "source": [
    "print (f\"\"\" Mean Absolute Error ={mean_absolute_error(y_pred, y_test)}, \n",
    "     Mean Squared Error = {mean_squared_error (y_pred, y_test)},\n",
    "     Root Mean Squared Error = (np.sqrt{mean_squared_error(y_pred, y_test)}),\n",
    "     R2 Score = {r2_score(y_pred, y_test)}\"\"\"\n",
    ")\n",
    "\n",
    "# if R2 score value is close to 1 it means the model is good, and bad as it gets closer to zero"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "id": "Y8AOoVXz9LdN"
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.linear_model import Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "id": "3ZQ_zkXiLbye"
   },
   "outputs": [],
   "source": [
    "dt = DecisionTreeRegressor(criterion='squared_error')  \n",
    "svr = SVR() \n",
    "lasso = Lasso()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error, r2_score\n",
    "import pickle as pkl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "id": "4BrMMJvMLfuO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: DecisionTreeRegressor\n",
      "Mean Squared Error (MSE): 1.49\n",
      "Mean Absolute Error (MAE): 0.69\n",
      "R-squared (R2): 0.94\n",
      "\n",
      "\n",
      "Model: SVR\n",
      "Mean Squared Error (MSE): 1.89\n",
      "Mean Absolute Error (MAE): 0.89\n",
      "R-squared (R2): 0.92\n",
      "\n",
      "\n",
      "Model: Lasso\n",
      "Mean Squared Error (MSE): 5.07\n",
      "Mean Absolute Error (MAE): 1.83\n",
      "R-squared (R2): 0.80\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models = [dt, svr, lasso]\n",
    "\n",
    "\n",
    "# Iterate over each model\n",
    "for model in models:\n",
    "    # Train the model\n",
    "    model.fit(X_train, y_train)\n",
    "    \n",
    "    # Save the trained model\n",
    "    with open('C:\\\\Users\\\\fadza\\\\Downloads\\\\AI_Stuff\\\\' + model.__class__.__name__ + '.pkl', 'wb') as file:\n",
    "        pkl.dump(model, file)\n",
    "    \n",
    "    # Make predictions\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    # Calculate regression metrics\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    # Print model name and metrics\n",
    "    print(f\"Model: {model.__class__.__name__}\")\n",
    "    print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
    "    print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "    print(f\"R-squared (R2): {r2:.2f}\")\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QNFlFZuqLmZm"
   },
   "source": [
    "## Ensembling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bagging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fadza\\anaconda3\\Lib\\site-packages\\sklearn\\ensemble\\_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error(Bagging):0.60\n",
      "Mean Squared Error (Bagging): 0.74\n",
      "R-squared (Bagging): 0.97\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "\n",
    "# Initialize Decision Tree Regressor (base estimator)\n",
    "dtree = DecisionTreeRegressor(max_depth=10)\n",
    "\n",
    "# Initialize Bagging Regressor\n",
    "bagging = BaggingRegressor(base_estimator=dtree,\n",
    "                           n_estimators=50,  # Number of base estimators\n",
    "                           max_samples=0.8,  # Number of samples to draw from X_train for each base estimator\n",
    "                           random_state=42)\n",
    "\n",
    "# Fit the Bagging Regressor using the training data\n",
    "bagging.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions using the testing set\n",
    "y_pred = bagging.predict(X_test)\n",
    "\n",
    "# Model evaluation\n",
    "mae =mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f'Mean Absolute Error(Bagging):{mae:.2f}' )\n",
    "print(f'Mean Squared Error (Bagging): {mse:.2f}')\n",
    "print(f'R-squared (Bagging): {r2:.2f}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grid Search with Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters for DecisionTreeRegressor: {'max_depth': 10, 'min_samples_split': 10}\n",
      "Best MSE for DecisionTreeRegressor: 1.20\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import make_scorer, mean_squared_error\n",
    "import numpy as np\n",
    "\n",
    "# Define the models\n",
    "dt = DecisionTreeRegressor(random_state=42)\n",
    "svr = SVR()\n",
    "lasso = Lasso()\n",
    "\n",
    "# Define the hyperparameter grid for each model\n",
    "param_grid_dt = {\n",
    "    'max_depth': [3, 5, 7, 10],\n",
    "    'min_samples_split': [2, 5, 10]\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "# Define the scoring metric\n",
    "scoring = make_scorer(mean_squared_error, greater_is_better=False)\n",
    "\n",
    "# Perform grid search for DecisionTreeRegressor\n",
    "grid_search_dt = GridSearchCV(estimator=dt, param_grid=param_grid_dt, scoring=scoring, cv=5)\n",
    "grid_search_dt.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "\n",
    "# Get the best parameters and scores for each model\n",
    "best_params_dt = grid_search_dt.best_params_\n",
    "best_score_dt = -grid_search_dt.best_score_\n",
    "\n",
    "\n",
    "print(f\"Best parameters for DecisionTreeRegressor: {best_params_dt}\")\n",
    "print(f\"Best MSE for DecisionTreeRegressor: {best_score_dt:.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retraining the Model using the best hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: DecisionTreeRegressor\n",
      "Mean Squared Error (MSE): 1.12\n",
      "Mean Absolute Error (MAE): 0.69\n",
      "R-squared (R2): 0.96\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import pickle as pkl\n",
    "\n",
    "# Define the models with the best hyperparameters from the grid search\n",
    "best_dt = DecisionTreeRegressor(max_depth=10, min_samples_split=10, random_state=42)\n",
    "\n",
    "# List of models\n",
    "models = [best_dt]\n",
    "\n",
    "# Iterate over each model\n",
    "for model in models:\n",
    "    # Train the model\n",
    "    model.fit(X_train, y_train)\n",
    "    \n",
    "    # Save the trained model\n",
    "    model_path = f'C:\\\\Users\\\\fadza\\\\Downloads\\\\AI_Stuff\\\\{model.__class__.__name__}.pkl'\n",
    "    with open(model_path, 'wb') as file:\n",
    "        pkl.dump(model, file)\n",
    "    \n",
    "    # Make predictions\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    # Calculate regression metrics\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    # Print model name and metrics\n",
    "    print(f\"Model: {model.__class__.__name__}\")\n",
    "    print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
    "    print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "    print(f\"R-squared (R2): {r2:.2f}\")\n",
    "    print(\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best model saved at: C:\\Users\\fadza\\Downloads\\AI_Stuff\\best_model.pkl\n"
     ]
    }
   ],
   "source": [
    "import pickle as pkl\n",
    "\n",
    "# Assuming `best_model` is your best trained model\n",
    "best_model = best_dt  # Replace with your actual best model\n",
    "\n",
    "# Save the best model\n",
    "model_path = 'C:\\\\Users\\\\fadza\\\\Downloads\\\\AI_Stuff\\\\best_model.pkl'\n",
    "with open(model_path, 'wb') as file:\n",
    "    pkl.dump(best_model, file)\n",
    "\n",
    "print(f\"Best model saved at: {model_path}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Function to Test the players_22 Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fadza\\AppData\\Local\\Temp\\ipykernel_23768\\421763031.py:1: DtypeWarning: Columns (25,108) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  testing_data = pd.read_csv('players_22.csv')\n"
     ]
    }
   ],
   "source": [
    "testing_data = pd.read_csv('players_22.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['overall', 'wage_eur', 'potential', 'movement_reactions', 'value_eur',\n",
       "       'international_reputation', 'passing', 'dribbling',\n",
       "       'league_name_freq_enc', 'shooting', 'attacking_short_passing',\n",
       "       'nation_position_freq_enc', 'skill_long_passing',\n",
       "       'player_traits_freq_enc', 'mentality_vision', 'skill_ball_control',\n",
       "       'power_shot_power', 'attacking_volleys', 'skill_curve',\n",
       "       'power_long_shots', 'league_level', 'mentality_penalties',\n",
       "       'skill_fk_accuracy', 'skill_dribbling', 'mentality_positioning',\n",
       "       'attacking_crossing', 'attacking_finishing', 'physic',\n",
       "       'attacking_heading_accuracy'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Index.drop() got an unexpected keyword argument 'axis'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[51], line 60\u001b[0m\n\u001b[0;32m     57\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     59\u001b[0m model_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mC:\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mUsers\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mfadza\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mDownloads\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mAI_Stuff\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mbest_model.pkl\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m---> 60\u001b[0m load_and_evaluate_model(model_path, testing_data, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124moverall\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "Cell \u001b[1;32mIn[51], line 15\u001b[0m, in \u001b[0;36mload_and_evaluate_model\u001b[1;34m(model_path, testing_data, target_column)\u001b[0m\n\u001b[0;32m     12\u001b[0m     best_model \u001b[38;5;241m=\u001b[39m pickle\u001b[38;5;241m.\u001b[39mload(file)\n\u001b[0;32m     14\u001b[0m \u001b[38;5;66;03m# Extract features and target for testing data\u001b[39;00m\n\u001b[1;32m---> 15\u001b[0m features \u001b[38;5;241m=\u001b[39m top_features\u001b[38;5;241m.\u001b[39mdrop([\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mleague_name_freq_enc\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnation_position_freq_enc\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mplayer_traits_freq_enc\u001b[39m\u001b[38;5;124m'\u001b[39m], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m     16\u001b[0m X_test \u001b[38;5;241m=\u001b[39m testing_data[features]\n\u001b[0;32m     18\u001b[0m y_test \u001b[38;5;241m=\u001b[39m testing_data[target_column]\n",
      "\u001b[1;31mTypeError\u001b[0m: Index.drop() got an unexpected keyword argument 'axis'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import pickle\n",
    "\n",
    "def load_and_evaluate_model(model_path, testing_data, target_column):\n",
    "    # Load the pre-trained model from the specified path\n",
    "    with open(model_path, 'rb') as file:\n",
    "        best_model = pickle.load(file)\n",
    "    \n",
    "    # Extract features and target for testing data\n",
    "    features = top_features.drop(['league_name_freq_enc', 'nation_position_freq_enc', 'player_traits_freq_enc'], axis=1)\n",
    "    X_test = testing_data[features]\n",
    "    \n",
    "    y_test = testing_data[target_column]\n",
    "    \n",
    "    \n",
    "    # Preprocessing for numerical data\n",
    "    numerical_cols = X_test.select_dtypes(include=['int64', 'float64']).columns\n",
    "    numerical_transformer = Pipeline(steps=[\n",
    "        ('imputer', SimpleImputer(strategy='mean')),\n",
    "        ('scaler', StandardScaler())\n",
    "    ])\n",
    "    \n",
    "    # Preprocessing for categorical data (if any, although not specified in the columns)\n",
    "    categorical_cols = []  # Assuming no categorical columns based on the specified columns\n",
    "    \n",
    "    # Bundle preprocessing for numerical and categorical data\n",
    "    preprocessor = ColumnTransformer(\n",
    "        transformers=[\n",
    "            ('num', numerical_transformer, numerical_cols),\n",
    "            ('cat', 'passthrough', categorical_cols)])\n",
    "    \n",
    "    # Fit the ColumnTransformer with a dummy DataFrame to initialize transformers\n",
    "    dummy_data = pd.DataFrame(columns=numerical_cols.tolist() + categorical_cols)\n",
    "    preprocessor.fit(dummy_data)\n",
    "    \n",
    "    # Transform testing data using the preprocessor\n",
    "    X_test_transformed = preprocessor.transform(X_test)\n",
    "    \n",
    "    # Make predictions on the transformed testing data\n",
    "    y_pred = best_model.predict(X_test_transformed)\n",
    "    \n",
    "    # Calculate regression metrics\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    # Printing model name and metrics\n",
    "    print(f\"Loaded Model: {best_model.__class__.__name__}\")\n",
    "    print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
    "    print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "    print(f\"R-squared (R2): {r2:.2f}\")\n",
    "    print(\"\\n\")\n",
    "\n",
    "model_path = 'C:\\\\Users\\\\fadza\\\\Downloads\\\\AI_Stuff\\\\best_model.pkl'\n",
    "load_and_evaluate_model(model_path, testing_data, 'overall')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding the best Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['overall', 'wage_eur', 'potential', 'movement_reactions', 'value_eur',\n",
       "       'international_reputation', 'passing', 'dribbling',\n",
       "       'league_name_freq_enc', 'shooting', 'attacking_short_passing',\n",
       "       'nation_position_freq_enc', 'skill_long_passing',\n",
       "       'player_traits_freq_enc', 'mentality_vision', 'skill_ball_control',\n",
       "       'power_shot_power', 'attacking_volleys', 'skill_curve',\n",
       "       'power_long_shots', 'league_level', 'mentality_penalties',\n",
       "       'skill_fk_accuracy', 'skill_dribbling', 'mentality_positioning',\n",
       "       'attacking_crossing', 'attacking_finishing', 'physic',\n",
       "       'attacking_heading_accuracy'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['wage_eur', 'potential', 'international_reputation', 'value_eur',\n",
       "       'movement_reactions'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.datasets import make_regression\n",
    "\n",
    "X_train, y_train = make_regression(n_samples=1000, n_features=5, random_state=42)\n",
    "X_train= pd.DataFrame(X_train, columns=[f'feature_{i}' for i in range(X_train.shape[1])])\n",
    "\n",
    "# Initialize Random Forest model\n",
    "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "\n",
    "# Fit the model\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# Get feature importances\n",
    "importances = rf.feature_importances_\n",
    "\n",
    "indices = np.argsort(importances)[-5:]\n",
    "\n",
    "# Get column names of top 5 features from original Top features dataset\n",
    "top_feature_names = for_feature_selection.columns[indices]\n",
    "\n",
    "top_feature_names\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage_eur</th>\n",
       "      <th>potential</th>\n",
       "      <th>movement_reactions</th>\n",
       "      <th>value_eur</th>\n",
       "      <th>international_reputation</th>\n",
       "      <th>passing</th>\n",
       "      <th>dribbling</th>\n",
       "      <th>league_name_freq_enc</th>\n",
       "      <th>shooting</th>\n",
       "      <th>attacking_short_passing</th>\n",
       "      <th>...</th>\n",
       "      <th>power_long_shots</th>\n",
       "      <th>league_level</th>\n",
       "      <th>mentality_penalties</th>\n",
       "      <th>skill_fk_accuracy</th>\n",
       "      <th>skill_dribbling</th>\n",
       "      <th>mentality_positioning</th>\n",
       "      <th>attacking_crossing</th>\n",
       "      <th>attacking_finishing</th>\n",
       "      <th>physic</th>\n",
       "      <th>attacking_heading_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>550000.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>100500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>89.0</td>\n",
       "      <td>...</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>375000.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>79000000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>0.0503</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>82.0</td>\n",
       "      <td>...</td>\n",
       "      <td>93.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>275000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>54500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>86.0</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>275000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>52500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>0.0454</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>84.0</td>\n",
       "      <td>...</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>300000.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>63500000.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>59.950785</td>\n",
       "      <td>64.216434</td>\n",
       "      <td>0.0565</td>\n",
       "      <td>55.593674</td>\n",
       "      <td>42.0</td>\n",
       "      <td>...</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.724397</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>7000.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>325000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>0.0202</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>55.0</td>\n",
       "      <td>...</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.0363</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>62.0</td>\n",
       "      <td>...</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>4000.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.0207</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>57.0</td>\n",
       "      <td>...</td>\n",
       "      <td>56.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>4000.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>220000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.0121</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>64.0</td>\n",
       "      <td>...</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>59.0</td>\n",
       "      <td>...</td>\n",
       "      <td>59.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      wage_eur  potential  movement_reactions    value_eur  \\\n",
       "0     550000.0       95.0                94.0  100500000.0   \n",
       "1     375000.0       92.0                90.0   79000000.0   \n",
       "2     275000.0       90.0                89.0   54500000.0   \n",
       "3     275000.0       90.0                85.0   52500000.0   \n",
       "4     300000.0       90.0                89.0   63500000.0   \n",
       "...        ...        ...                 ...          ...   \n",
       "9995    7000.0       64.0                54.0     325000.0   \n",
       "9996    2000.0       66.0                61.0     300000.0   \n",
       "9997    4000.0       62.0                65.0     275000.0   \n",
       "9998    4000.0       69.0                56.0     220000.0   \n",
       "9999    2000.0       78.0                30.0     275000.0   \n",
       "\n",
       "      international_reputation    passing  dribbling  league_name_freq_enc  \\\n",
       "0                          5.0  86.000000  96.000000                0.0503   \n",
       "1                          5.0  81.000000  91.000000                0.0503   \n",
       "2                          5.0  83.000000  92.000000                0.0565   \n",
       "3                          5.0  81.000000  86.000000                0.0454   \n",
       "4                          5.0  59.950785  64.216434                0.0565   \n",
       "...                        ...        ...        ...                   ...   \n",
       "9995                       1.0  43.000000  38.000000                0.0202   \n",
       "9996                       1.0  56.000000  62.000000                0.0363   \n",
       "9997                       1.0  58.000000  62.000000                0.0207   \n",
       "9998                       1.0  61.000000  67.000000                0.0121   \n",
       "9999                       1.0  54.000000  67.000000                0.0316   \n",
       "\n",
       "       shooting  attacking_short_passing  ...  power_long_shots  league_level  \\\n",
       "0     89.000000                     89.0  ...              88.0           1.0   \n",
       "1     93.000000                     82.0  ...              93.0           1.0   \n",
       "2     86.000000                     86.0  ...              90.0           1.0   \n",
       "3     91.000000                     84.0  ...              88.0           1.0   \n",
       "4     55.593674                     42.0  ...              25.0           1.0   \n",
       "...         ...                      ...  ...               ...           ...   \n",
       "9995  29.000000                     55.0  ...              28.0           1.0   \n",
       "9996  38.000000                     62.0  ...              26.0           1.0   \n",
       "9997  60.000000                     57.0  ...              56.0           1.0   \n",
       "9998  51.000000                     64.0  ...              53.0           1.0   \n",
       "9999  58.000000                     59.0  ...              59.0           2.0   \n",
       "\n",
       "      mentality_penalties  skill_fk_accuracy  skill_dribbling  \\\n",
       "0                    76.0               90.0             96.0   \n",
       "1                    85.0               79.0             93.0   \n",
       "2                    80.0               83.0             93.0   \n",
       "3                    91.0               80.0             88.0   \n",
       "4                    37.0               25.0             25.0   \n",
       "...                   ...                ...              ...   \n",
       "9995                 39.0               30.0             27.0   \n",
       "9996                 41.0               31.0             61.0   \n",
       "9997                 55.0               52.0             60.0   \n",
       "9998                 51.0               41.0             67.0   \n",
       "9999                 51.0               33.0             69.0   \n",
       "\n",
       "      mentality_positioning  attacking_crossing  attacking_finishing  \\\n",
       "0                      92.0                84.0                 94.0   \n",
       "1                      91.0                83.0                 95.0   \n",
       "2                      89.0                80.0                 85.0   \n",
       "3                      86.0                76.0                 91.0   \n",
       "4                      25.0                25.0                 25.0   \n",
       "...                     ...                 ...                  ...   \n",
       "9995                   29.0                45.0                 24.0   \n",
       "9996                   43.0                64.0                 43.0   \n",
       "9997                   66.0                61.0                 58.0   \n",
       "9998                   53.0                61.0                 49.0   \n",
       "9999                   59.0                57.0                 57.0   \n",
       "\n",
       "         physic  attacking_heading_accuracy  \n",
       "0     63.000000                        71.0  \n",
       "1     79.000000                        86.0  \n",
       "2     64.000000                        50.0  \n",
       "3     86.000000                        76.0  \n",
       "4     67.724397                        25.0  \n",
       "...         ...                         ...  \n",
       "9995  72.000000                        60.0  \n",
       "9996  62.000000                        43.0  \n",
       "9997  55.000000                        49.0  \n",
       "9998  72.000000                        53.0  \n",
       "9999  49.000000                        59.0  \n",
       "\n",
       "[10000 rows x 28 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for_feature_selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the model with the important features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: DecisionTreeRegressor\n",
      "Mean Squared Error (MSE): 0.69\n",
      "Mean Absolute Error (MAE): 0.54\n",
      "R-squared (R2): 0.97\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import pickle as pkl\n",
    "\n",
    "columns = ['wage_eur','potential','international_reputation','value_eur','movement_reactions']\n",
    "new_data = for_feature_selection[columns]\n",
    "\n",
    "\n",
    "x = new_data\n",
    "Y= feature_subset_training['overall']\n",
    "\n",
    "# Initialize Decision Tree Regressor with hyperparameters\n",
    "dt = DecisionTreeRegressor(max_depth=10, min_samples_split=10, random_state=42)\n",
    "\n",
    "# Train the Decision Tree Regressor\n",
    "dt.fit(x, Y)\n",
    "\n",
    "# Save the trained model using pickle\n",
    "model_path = 'C:\\\\Users\\\\fadza\\\\Downloads\\\\AI_Stuff\\\\best_dt_model.pkl'\n",
    "with open(model_path, 'wb') as file:\n",
    "    pkl.dump(dt, file)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = dt.predict(x)\n",
    "\n",
    "# Calculate regression metrics\n",
    "mse = mean_squared_error(y, y_pred)\n",
    "mae = mean_absolute_error(y, y_pred)\n",
    "r2 = r2_score(y, y_pred)\n",
    "\n",
    "# Print model name and metrics\n",
    "print(f\"Model: {dt.__class__.__name__}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "print(f\"R-squared (R2): {r2:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
